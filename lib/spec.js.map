{"version":3,"sources":["../src/spec.js"],"names":["Translator","isFunction","translate","x","equal","bar","key","options","deepEqual","locale","bingo","toLowerCase","scope","name","count","registerTranslations","damals","about_x_hours_ago","one","other","separator","foo","x_items","zero","fallback","require","JSON","parse","withLocale","date","Date","setTimezone","localize","format","type","my_namespace","greeting","registerInterpolations","app_name","visitor","it","describe","instance","beforeEach","doesNotThrow","withScope","baz","bam","another","mixed","dots","when","where","users","current","_registry","interpolations","brand","question","interpolate","keepTrailingDot","myFunc","myFunc2","fallbacks","object","oh","matches","hello","previousFallbackLocale","setFallbackLocale","fallbackLocale","keys","undefined","i","ii","throws","length","prev","setInterpolate","getLocale","setLocale","previous","handler","done","onLocaleChange","offLocaleChange","setTimeout","getFallbackLocale","fallbackLocales","getAvailableLocales","translations","setAvailableLocales","availableLocales","concat","result","oldLocale","newLocale","previousLocale","oldConsoleError","console","error","message","test","fail","apply","arguments","handlers","push","onTranslationNotFound","offTranslationNotFound","getSeparator","setSeparator","getInterpolate","getKeyTransformer","keyTransformer","setKeyTransformer","transformer","translation","withSeparator","afterEach","before","data","actual","expected","bing","bong","isString","value","Object","prototype","toString","call","isObject","isUndefined"],"mappings":"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","file":"spec.js","sourcesContent":["import assert from 'assert';\r\nimport time from 'time';\r\nimport translate from './counterpart';\r\nconst Translator = translate.Translator;\r\n\r\ndescribe('translate', () => {\r\n  let instance;\r\n\r\n  beforeEach(() => {\r\n    instance = new Translator();\r\n  });\r\n\r\n  it('is a function', () => {\r\n    assert.isFunction(instance.translate);\r\n  });\r\n\r\n  it('is backward-compatible', () => {\r\n    assert.isFunction(translate);\r\n    assert.isFunction(translate.translate);\r\n  });\r\n\r\n  describe('when called', () => {\r\n    describe('with a non-empty string or an array as first argument', () => {\r\n      it('does not throw an invalid argument error', () => {\r\n        assert.doesNotThrow(() => { instance.translate('foo'); },   /invalid argument/);\r\n        assert.doesNotThrow(() => { instance.translate(['foo']); }, /invalid argument/);\r\n      });\r\n\r\n      describe('with the default locale present', () => {\r\n        describe('without a current scope or provided scope option', () => {\r\n          it('generates the correct normalized keys', () => {\r\n            assert.equal(instance.translate('foo'), 'missing translation: en.foo');\r\n          });\r\n        });\r\n\r\n        describe('with a current scope present', () => {\r\n          it('generates the correct normalized keys', () => {\r\n            instance.withScope('other', () => {\r\n              assert.equal(instance.translate('foo'), 'missing translation: en.other.foo');\r\n            });\r\n          });\r\n        });\r\n\r\n        describe('with a scope provided as option', () => {\r\n          it('generates the correct normalized keys', () => {\r\n            assert.equal(instance.translate('foo', { scope: 'other' }), 'missing translation: en.other.foo');\r\n          });\r\n        });\r\n      });\r\n\r\n      describe('with a different locale present', () => {\r\n        describe('without a current scope or provided scope option', () => {\r\n          it('generates the correct normalized keys', () => {\r\n            instance.withLocale('de', () => {\r\n              assert.equal(instance.translate('foo'), 'missing translation: de.foo');\r\n            });\r\n          });\r\n        });\r\n\r\n        describe('with a current scope present', () => {\r\n          it('generates the correct normalized keys', () => {\r\n            instance.withLocale('de', () => {\r\n              instance.withScope('other', () => {\r\n                assert.equal(instance.translate('foo'), 'missing translation: de.other.foo');\r\n              });\r\n            });\r\n          });\r\n        });\r\n\r\n        describe('with a scope provided as option', () => {\r\n          it('generates the correct normalized keys', () => {\r\n            instance.withLocale('de', () => {\r\n              assert.equal(instance.translate('foo', { scope: 'other' }), 'missing translation: de.other.foo');\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      describe('with a locale provided as option', () => {\r\n        describe('without a current scope or provided scope option', () => {\r\n          it('generates the correct normalized keys', () => {\r\n            assert.equal(instance.translate('foo', { locale: 'de' }), 'missing translation: de.foo');\r\n          });\r\n        });\r\n\r\n        describe('with a current scope present', () => {\r\n          it('generates the correct normalized keys', () => {\r\n            instance.withScope('other', () => {\r\n              assert.equal(instance.translate('foo', { locale: 'de' }), 'missing translation: de.other.foo');\r\n            });\r\n          });\r\n        });\r\n\r\n        describe('with a scope provided as option', () => {\r\n          it('generates the correct normalized keys', () => {\r\n            assert.equal(instance.translate('foo', { locale: 'de', scope: 'other' }), 'missing translation: de.other.foo');\r\n          });\r\n        });\r\n      });\r\n\r\n      describe('with options provided', () => {\r\n        it('does not mutate these options', () => {\r\n          const options = { locale: 'en', scope: ['foo1', 'foo2'], count: 3, bar: { baz: 'bum' } };\r\n          instance.translate('boing', options);\r\n          assert.deepEqual(options, { locale: 'en', scope: ['foo1', 'foo2'], count: 3, bar: { baz: 'bum' } });\r\n        });\r\n      });\r\n\r\n      describe('with a translation for the key present', () => {\r\n        it('returns that translation', () => {\r\n          instance.registerTranslations('en', { foo: { bar: { baz: { bam: 'boo' } } } });\r\n\r\n          // strings\r\n          assert.equal(instance.translate('foo.bar.baz.bam'),                                'boo');\r\n          assert.equal(instance.translate('bar.baz.bam',         { scope: 'foo' }),          'boo');\r\n          assert.equal(instance.translate('baz.bam',             { scope: 'foo.bar' }),      'boo');\r\n          assert.equal(instance.translate('bam',                 { scope: 'foo.bar.baz' }),  'boo');\r\n\r\n          // arrays\r\n          assert.equal(instance.translate(['foo', 'bar', 'baz', 'bam']),                                     'boo');\r\n          assert.equal(instance.translate(['bar', 'baz', 'bam'],         { scope: ['foo'] }),                'boo');\r\n          assert.equal(instance.translate(['baz', 'bam'],                { scope: ['foo', 'bar'] }),         'boo');\r\n          assert.equal(instance.translate(['bam'],                       { scope: ['foo', 'bar', 'baz'] }),  'boo');\r\n\r\n          // mixed\r\n          assert.equal(instance.translate(['foo.bar', 'baz', 'bam']),                                 'boo');\r\n          assert.equal(instance.translate(['bar', 'baz.bam'],         { scope: 'foo' }),              'boo');\r\n          assert.equal(instance.translate(['baz', 'bam'],             { scope: 'foo.bar' }),          'boo');\r\n          assert.equal(instance.translate('bam',                      { scope: ['foo.bar', 'baz'] }), 'boo');\r\n\r\n          // strange looking\r\n          assert.equal(instance.translate(['..foo.bar', 'baz', '', 'bam']),                                            'boo');\r\n          assert.equal(instance.translate(['bar', 'baz..bam.'],             { scope: '.foo' }),                        'boo');\r\n          assert.equal(instance.translate(['baz', null, 'bam'],             { scope: 'foo.bar.' }),                    'boo');\r\n          assert.equal(instance.translate('bam...',                         { scope: [null, 'foo..bar', '', 'baz'] }), 'boo');\r\n        });\r\n\r\n        describe('with a `count` provided as option', () => {\r\n          it('correctly pluralizes the translated value', () => {\r\n            instance.registerTranslations('en', { foo: { zero: 'no items', one: 'one item', other: '%(count)s items' } });\r\n\r\n            assert.equal(instance.translate('foo', { count: 0 }),   'no items');\r\n            assert.equal(instance.translate('foo', { count: 1 }),   'one item');\r\n            assert.equal(instance.translate('foo', { count: 2 }),   '2 items');\r\n            assert.equal(instance.translate('foo', { count: 42 }),  '42 items');\r\n          });\r\n        });\r\n\r\n        describe('with a `separator` provided as option', () => {\r\n          it('correctly returns single array with key', () => {\r\n            instance.registerTranslations('en', {\r\n              'long.key.with.dots.in.name': 'Key with dots doesn\\'t get split and returns correctly',\r\n              another: {\r\n                key: 'bar'\r\n              },\r\n              mixed: {\r\n                'dots.and': {\r\n                  separator: 'bingo'\r\n                }\r\n              }\r\n            });\r\n\r\n            assert.equal(instance.translate('long.key.with.dots.in.name', { separator: '-' }), 'Key with dots doesn\\'t get split and returns correctly');\r\n            assert.equal(instance.translate('long.key.with.dots.in.name.not-found', { separator: '-' }), 'missing translation: en-long.key.with.dots.in.name.not-found');\r\n            assert.equal(instance.translate('another-key', { separator: '-' }), 'bar');\r\n            assert.equal(instance.translate('mixed-dots.and-separator', { separator: '-' }), 'bingo');\r\n          });\r\n\r\n          it('correctly returns nested key when using `*` as seperator', () => {\r\n            instance.registerTranslations('en', { \"long\": { key: { \"with\": { dots: { \"in\": { name: 'boo'  }  } } }}  });\r\n\r\n            assert.equal(instance.translate('long*key*with*dots*in*name', { separator: '*' }), 'boo');\r\n          });\r\n        });\r\n\r\n        describe('with other options provided', () => {\r\n          describe('by default', () => {\r\n            it('interpolates these options into the translated value', () => {\r\n              instance.registerTranslations('en', { foo: 'Hi %(name)s! See you %(when)s!' });\r\n              assert.equal(instance.translate('foo', { name: 'Paul', when: 'later', where: 'home' }), 'Hi Paul! See you later!');\r\n\r\n              instance.registerTranslations('en', { foo: 'Hello %(users[0].name)s and %(users[1].name)s!' });\r\n              assert.equal(instance.translate('foo', { users: [{ name: 'Molly' }, { name: 'Polly' }] }), 'Hello Molly and Polly!');\r\n            });\r\n\r\n            it('interpolates the registered interpolations into the translated value', () => {\r\n              const current = instance._registry.interpolations;\r\n\r\n              instance.registerTranslations('en', {'hello':'Hello from %(brand)s!'});\r\n              instance.registerInterpolations({brand:'Z'});\r\n              assert.equal(instance.translate('hello'), 'Hello from Z!');\r\n\r\n              instance._registry.interpolations = current;\r\n\r\n              instance.registerInterpolations({ app_name: 'My Cool App', question: 'How are you today?' });\r\n              instance.registerTranslations('en', { greeting: 'Welcome to %(app_name)s, %(name)s! %(question)s' });\r\n\r\n              assert.equal(instance.translate('greeting', { name: 'Martin' }), 'Welcome to My Cool App, Martin! How are you today?');\r\n              assert.equal(instance.translate('greeting', { name: 'Martin', app_name: 'The Foo App' }), 'Welcome to The Foo App, Martin! How are you today?');\r\n\r\n              instance._registry.interpolations = current;\r\n            });\r\n          });\r\n\r\n          describe('with the `interpolate` options set to `false`', () => {\r\n            it('interpolates these options into the translated value', () => {\r\n              instance.registerTranslations('en', { foo: 'Hi %(name)s! See you %(when)s!' });\r\n              assert.equal(instance.translate('foo', { interpolate: false, name: 'Paul', when: 'later', where: 'home' }), 'Hi %(name)s! See you %(when)s!');\r\n            });\r\n          });\r\n        });\r\n\r\n        describe('with the keepTrailingDot setting set to true', () => {\r\n          it('returns the translation for keys that contain a trailing dot', () => {\r\n            instance.registerTranslations('fr', { foo: { bar: 'baz', 'With a dot.': 'Avec un point.' }, 'dot.': 'point.' });\r\n            instance._registry.keepTrailingDot = true;\r\n\r\n            instance.withLocale('fr', () => {\r\n              assert.equal(instance.translate('foo.bar'),  'baz');\r\n              assert.equal(instance.translate('foo.With a dot.'),  'Avec un point.');\r\n              assert.equal(instance.translate('dot.'),  'point.');\r\n\r\n              assert.equal(instance.translate('foo..bar'),  'baz');\r\n              assert.equal(instance.translate('foo..With a dot.'),  'Avec un point.');\r\n              assert.equal(instance.translate('.dot.'),  'point.');\r\n\r\n              assert.equal(instance.translate('foo.bar.'),  'missing translation: fr.foo.bar.');\r\n              assert.equal(instance.translate('foo.With a dot..'),  'missing translation: fr.foo.With a dot..');\r\n              assert.equal(instance.translate('foo.With. a dot.'),  'missing translation: fr.foo.With. a dot.');\r\n              assert.equal(instance.translate('dot..'),  'missing translation: fr.dot..');\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      describe('with a translation for a prefix of the key present', () => {\r\n        it('returns the remaining translation part', () => {\r\n          instance.registerTranslations('en', { foo: { bar: { baz: { zero: 'no items', one: 'one item', other: '%(count)s items' } } } });\r\n          assert.deepEqual(instance.translate('baz', { scope: ['foo', 'bar'] }), { zero: 'no items', one: 'one item', other: '%(count)s items' });\r\n        });\r\n      });\r\n\r\n      describe('with an array-type translation for the key present', () => {\r\n        it('returns the array that key points to', () => {\r\n          instance.registerTranslations('en', { foo: { bar: { baz: [1, 'A', 0.42] } } });\r\n          assert.deepEqual(instance.translate(['bar', 'baz'], { scope: 'foo' }), [1, 'A', 0.42]);\r\n        });\r\n      });\r\n\r\n      describe('with a function-type translation for the key present', () => {\r\n        it('returns the array that key points to', () => {\r\n          const myFunc = () => {};\r\n\r\n          instance.registerTranslations('en', { foo: { bar: { baz: myFunc } } });\r\n          assert.equal(instance.translate(['bar', 'baz'], { scope: 'foo' }), myFunc);\r\n        });\r\n      });\r\n\r\n      describe('with a function-type fallback present', () => {\r\n        it('returns the array that key points to', () => {\r\n          const myFunc = () => 'Here I am!';\r\n          const myFunc2 = x => `Here ${x} are!`;\r\n          const fallbacks = [':i_dont_exist_either', myFunc, 'Should not be returned'];\r\n\r\n          assert.equal(instance.translate('i_dont_exist', { fallback: myFunc }), 'Here I am!');\r\n          assert.equal(instance.translate('i_dont_exist', { fallback: myFunc2, object: 'you' }), 'Here you are!');\r\n          assert.equal(instance.translate('i_dont_exist', { fallback: myFunc2 }), 'Here i_dont_exist are!');\r\n          assert.equal(instance.translate('i_dont_exist', { fallback: fallbacks }), 'Here I am!');\r\n        });\r\n      });\r\n\r\n      describe('without a translation for the key present', () => {\r\n        it('returns a string \"missing translation: %(locale).%(scope).%(key)\"', () => {\r\n          assert.deepEqual(instance.translate('bar', { locale: 'unknown', scope: 'foo' }), 'missing translation: unknown.foo.bar');\r\n        });\r\n\r\n        describe('with a `fallback` provided as option', () => {\r\n          it('returns the fallback', () => {\r\n            assert.equal(instance.translate('baz', { locale: 'foo', scope: 'bar', fallback: 'boom' }), 'boom');\r\n            assert.equal(instance.translate('baz', { locale: 'foo', scope: 'bar', fallback: 'Hello, %(name)s!', name: 'Martin' }), 'Hello, Martin!');\r\n\r\n            assert.equal(instance.translate('bazz', { locale: 'en', scope: 'bar', fallback: { zero: 'no items', one: 'one item', other: '%(count)s items' }, count: 0 }), 'no items');\r\n            assert.equal(instance.translate('bazz', { locale: 'en', scope: 'bar', fallback: { zero: 'no items', one: 'one item', other: '%(count)s items' }, count: 1 }), 'one item');\r\n            assert.equal(instance.translate('bazz', { locale: 'en', scope: 'bar', fallback: { zero: 'no items', one: 'one item', other: '%(count)s items' }, count: 2 }), '2 items');\r\n\r\n            assert.deepEqual(instance.translate('baz', { locale: 'foo', scope: 'bar', fallback: { oh: 'yeah' } }), { oh: 'yeah' });\r\n            assert.deepEqual(instance.translate('baz', { locale: 'foo', scope: 'bar', fallback: [1, 'A', 0.42] }), 1);\r\n          });\r\n\r\n          it('translates the fallback if given as \"symbol\" or array', () => {\r\n            instance.registerTranslations('en', { foo: { bar: 'bar', baz: 'baz' } });\r\n\r\n            assert.equal(instance.translate('missing', { fallback: 'default' }), 'default');\r\n            assert.equal(instance.translate('missing', { fallback: ':foo.bar' }), 'bar');\r\n            assert.equal(instance.translate('missing', { fallback: ':bar', scope: 'foo' }), 'bar');\r\n            assert.equal(instance.translate('missing', { fallback: [':also_missing', ':foo.bar'] }), 'bar');\r\n            assert.matches(instance.translate('missing', { fallback: [':also_missing', ':foo.missed'] }), /missing translation/);\r\n          });\r\n        });\r\n\r\n        describe('with a global `fallbackLocale` present', () => {\r\n          it('returns the entry of the fallback locale', () => {\r\n            instance.registerTranslations('de', { bar: { baz: 'bam' } });\r\n            instance.registerTranslations('de', { hello: 'Hallo %(name)s!' });\r\n\r\n            assert.equal(instance.translate('baz', { locale: 'foo', scope: 'bar' }), 'missing translation: foo.bar.baz');\r\n            assert.equal(instance.translate('hello', { locale: 'foo', name: 'Martin' }), 'missing translation: foo.hello');\r\n\r\n            const previousFallbackLocale = instance.setFallbackLocale('de');\r\n\r\n            assert.equal(instance.translate('baz', { locale: 'foo', scope: 'bar' }), 'bam');\r\n            assert.equal(instance.translate('hello', { locale: 'foo', name: 'Martin' }), 'Hallo Martin!');\r\n\r\n            instance.setFallbackLocale(previousFallbackLocale);\r\n          });\r\n        });\r\n\r\n        describe('with multiple global `fallbackLocales` present', () => {\r\n          it('returns the entry of the last fallback locale', () => {\r\n            instance.registerTranslations('de', { bar: { baz: 'bam' } });\r\n            instance.registerTranslations('de', { hello: 'Hallo %(name)s!' });\r\n\r\n            assert.equal(instance.translate('baz', { locale: 'foo', scope: 'bar' }), 'missing translation: foo.bar.baz');\r\n            assert.equal(instance.translate('hello', { locale: 'foo', name: 'Martin' }), 'missing translation: foo.hello');\r\n\r\n            const previousFallbackLocale = instance.setFallbackLocale([ 'bar', 'de' ]);\r\n\r\n            assert.equal(instance.translate('baz', { locale: 'foo', scope: 'bar' }), 'bam');\r\n            assert.equal(instance.translate('hello', { locale: 'foo', name: 'Martin' }), 'Hallo Martin!');\r\n\r\n            instance.setFallbackLocale(previousFallbackLocale);\r\n          });\r\n\r\n          it('returns the entry of the first fallback locale to have an entry', () => {\r\n            instance.registerTranslations('de', { bar: { baz: 'bam' } });\r\n            instance.registerTranslations('de', { hello: 'Hallo %(name)s!' });\r\n\r\n            assert.equal(instance.translate('baz', { locale: 'foo', scope: 'bar' }), 'missing translation: foo.bar.baz');\r\n            assert.equal(instance.translate('hello', { locale: 'foo', name: 'Martin' }), 'missing translation: foo.hello');\r\n\r\n            const previousFallbackLocale = instance.setFallbackLocale([ 'bar', 'de', 'baz' ]);\r\n\r\n            assert.equal(instance.translate('baz', { locale: 'foo', scope: 'bar' }), 'bam');\r\n            assert.equal(instance.translate('hello', { locale: 'foo', name: 'Martin' }), 'Hallo Martin!');\r\n\r\n            instance.setFallbackLocale(previousFallbackLocale);\r\n          });\r\n        });\r\n\r\n        describe('with a `fallbackLocale` provided as option', () => {\r\n          it('returns the entry of the fallback locale', () => {\r\n            instance.registerTranslations('en', { bar: { baz: 'bam' } });\r\n            instance.registerTranslations('en', { hello: 'Hello, %(name)s!' });\r\n\r\n            assert.equal(instance.translate('baz', { locale: 'foo', scope: 'bar', fallbackLocale: 'en' }), 'bam');\r\n            assert.equal(instance.translate('hello', { locale: 'foo', fallbackLocale: 'en', name: 'Martin' }), 'Hello, Martin!');\r\n          });\r\n        });\r\n\r\n        describe('with multiple `fallbackLocales` provided as option', () => {\r\n          it('returns the entry of the last fallback locale', () => {\r\n            instance.registerTranslations('en', { bar: { baz: 'bam' } });\r\n            instance.registerTranslations('en', { hello: 'Hello, %(name)s!' });\r\n\r\n            assert.equal(instance.translate('baz', { locale: 'foo', scope: 'bar', fallbackLocale: ['bar', 'en'] }), 'bam');\r\n            assert.equal(instance.translate('hello', { locale: 'foo', fallbackLocale: ['bar', 'en'], name: 'Martin' }), 'Hello, Martin!');\r\n          });\r\n\r\n          it('returns the entry of the first fallback locale that has an entry', () => {\r\n            instance.registerTranslations('en', { bar: { baz: 'bam' } });\r\n            instance.registerTranslations('en', { hello: 'Hello, %(name)s!' });\r\n\r\n            assert.equal(instance.translate('baz', { locale: 'foo', scope: 'bar', fallbackLocale: ['bar', 'en', 'baz'] }), 'bam');\r\n            assert.equal(instance.translate('hello', { locale: 'foo', fallbackLocale: ['bar', 'en', 'baz'], name: 'Martin' }), 'Hello, Martin!');\r\n          });\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('without a valid key as first argument', () => {\r\n      it('throws an invalid argument error', () => {\r\n        const keys = [undefined, null, 42, {}, new Date(), /./, () => {}, [], ''];\r\n\r\n        for (let i = 0, ii = keys.length; i < ii; i++) {\r\n          assert.throws(() => { instance.translate(keys[i]); }, /invalid argument/);\r\n        }\r\n      });\r\n    });\r\n\r\n    describe('with global interpolate setting set to false', () => {\r\n      it('will not interpolate', () => {\r\n        const current = instance._registry.interpolations;\r\n\r\n        instance.registerTranslations('en', { 'hello':'Hello from %(brand)s!' });\r\n        instance.registerInterpolations({ brand: 'Z' });\r\n\r\n        assert.equal(instance.translate('hello'), 'Hello from Z!');\r\n\r\n        const prev = instance.setInterpolate(false);\r\n        assert.equal(instance.translate('hello'), 'Hello from %(brand)s!');\r\n        assert.equal(instance.translate('hello', { interpolate: true }), 'Hello from %(brand)s!');\r\n        instance.setInterpolate(prev);\r\n\r\n        instance._registry.interpolations = current;\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('#translate', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.translate);\r\n    });\r\n  });\r\n\r\n  describe('#getLocale', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.getLocale);\r\n    });\r\n\r\n    it('returns the locale stored in the registry', () => {\r\n      assert.equal(instance.getLocale(), instance._registry.locale);\r\n    });\r\n\r\n    it('returns \"en\" by default', () => {\r\n      assert.equal(instance.getLocale(), 'en');\r\n    });\r\n  });\r\n\r\n  describe('#setLocale', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.setLocale);\r\n    });\r\n\r\n    it('sets the locale stored in the registry', () => {\r\n      instance.setLocale('foo');\r\n      assert.equal(instance._registry.locale, 'foo');\r\n    });\r\n\r\n    it('returns the previous locale that was stored in the registry', () => {\r\n      const current  = instance.getLocale();\r\n      const previous = instance.setLocale(`${current}x`);\r\n      assert.equal(previous, current);\r\n    });\r\n\r\n    describe('when called with a locale that differs from the current one', () => {\r\n      it('emits a \"localechange\" event', done => {\r\n        const handler = () => { done() };\r\n        instance.onLocaleChange(handler);\r\n        instance.setLocale(`${instance.getLocale()}x`);\r\n        instance.offLocaleChange(handler);\r\n      });\r\n    });\r\n\r\n    describe('when called with the current locale', () => {\r\n      it('does not emit a \"localechange\" event', done => {\r\n        const handler = () => { done('event was emitted'); };\r\n        instance.onLocaleChange(handler);\r\n        instance.setLocale(instance.getLocale());\r\n        instance.offLocaleChange(handler);\r\n        setTimeout(done, 100);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('#getFallbackLocale', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.getFallbackLocale);\r\n    });\r\n\r\n    it('returns the fallback locale stored in the registry', () => {\r\n      assert.equal(instance.getFallbackLocale(), instance._registry.fallbackLocales);\r\n    });\r\n\r\n    it('returns an empty array by default', () => {\r\n      assert.deepEqual(instance.getFallbackLocale(), []);\r\n    });\r\n  });\r\n\r\n  describe('#setFallbackLocale', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.setFallbackLocale);\r\n    });\r\n\r\n    it('sets the fallback locale stored in the registry', () => {\r\n      instance.setFallbackLocale('foo');\r\n      assert.deepEqual(instance._registry.fallbackLocales, ['foo']);\r\n    });\r\n\r\n    it('returns the previous fallback locale that was stored in the registry', () => {\r\n      const current  = instance.getFallbackLocale();\r\n      const previous = instance.setFallbackLocale(`${current}x`);\r\n      assert.equal(previous, current);\r\n    });\r\n  });\r\n\r\n  describe('#getAvailableLocales', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.getAvailableLocales);\r\n    });\r\n\r\n    it('returns the locales of the registered translations by default', () => {\r\n      assert.deepEqual(instance.getAvailableLocales(), Object.keys(instance._registry.translations));\r\n    });\r\n  });\r\n\r\n  describe('#setAvailableLocales', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.setAvailableLocales);\r\n    });\r\n\r\n    it('sets the locales available', () => {\r\n      instance.setAvailableLocales(['foo', 'bar']);\r\n      assert.deepEqual(instance._registry.availableLocales, ['foo', 'bar']);\r\n    });\r\n\r\n    it('returns the previous available locales', () => {\r\n      const current  = instance.getAvailableLocales();\r\n      const previous = instance.setAvailableLocales(current.concat('x'));\r\n      assert.deepEqual(previous, current);\r\n    });\r\n  });\r\n\r\n  describe('#withLocale', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.withLocale);\r\n    });\r\n\r\n    it('temporarily changes the current locale within the callback', () => {\r\n      const locale = instance.getLocale();\r\n\r\n      instance.withLocale(`${locale}x`, () => {\r\n        assert.equal(instance.getLocale(), `${locale}x`);\r\n      });\r\n\r\n      assert.equal(instance.getLocale(), locale);\r\n    });\r\n\r\n    it('allows a custom callback context to be set', () => {\r\n      instance.withLocale('foo', function() {\r\n        assert.equal(this.bar, 'baz');\r\n      }, { bar: 'baz' })\r\n    });\r\n\r\n    it('does not emit a \"localechange\" event', done => {\r\n      const handler = () => { done('event was emitted'); };\r\n      instance.onLocaleChange(handler);\r\n      instance.withLocale(`${instance.getLocale()}x`, () => {});\r\n      instance.offLocaleChange(handler);\r\n      setTimeout(done, 100);\r\n    });\r\n\r\n    it('returns the return value of the callback', () => {\r\n      const result = instance.withLocale('foo', () => 'bar');\r\n      assert.equal(result, 'bar');\r\n    });\r\n  });\r\n\r\n  describe('#withScope', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.withScope);\r\n    });\r\n\r\n    it('temporarily changes the current scope within the callback', () => {\r\n      const scope = instance._registry.scope;\r\n\r\n      instance.withScope(`${scope}x`, () => {\r\n        assert.equal(instance._registry.scope, `${scope}x`);\r\n      });\r\n\r\n      assert.equal(instance._registry.scope, scope);\r\n    });\r\n\r\n    it('allows a custom callback context to be set', () => {\r\n      instance.withScope('foo', function() {\r\n        assert.equal(this.bar, 'baz');\r\n      }, { bar: 'baz' })\r\n    });\r\n\r\n    it('returns the return value of the callback', () => {\r\n      const result = instance.withScope('foo', () => 'bar');\r\n      assert.equal(result, 'bar');\r\n    });\r\n  });\r\n\r\n  describe('#onLocaleChange', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.onLocaleChange);\r\n    });\r\n\r\n    it('is called when the locale changes', done => {\r\n      const handler = () => { done(); };\r\n      instance.onLocaleChange(handler);\r\n      instance.setLocale(`${instance.getLocale()}x`);\r\n      instance.offLocaleChange(handler);\r\n    });\r\n\r\n    it('is not called when the locale does not change', done => {\r\n      const handler = () => { done('function was called'); };\r\n      instance.onLocaleChange(handler);\r\n      instance.setLocale(instance.getLocale());\r\n      instance.offLocaleChange(handler);\r\n      setTimeout(done, 100);\r\n    });\r\n\r\n    describe('when called', () => {\r\n      it('exposes both the new and old locale as arguments', done => {\r\n        const oldLocale = instance.getLocale();\r\n        const newLocale = `${oldLocale}x`;\r\n\r\n        const handler = (locale, previousLocale) => {\r\n          assert.equal(locale, newLocale);\r\n          assert.equal(previousLocale, oldLocale);\r\n          done();\r\n        };\r\n\r\n        instance.onLocaleChange(handler);\r\n        instance.setLocale(newLocale);\r\n        instance.offLocaleChange(handler);\r\n      });\r\n    });\r\n\r\n    describe('when called more than 10 times', () => {\r\n      it('does not let Node issue a warning about a possible memory leak', () => {\r\n        const oldConsoleError = console.error;\r\n\r\n        console.error = function(message) {\r\n          if (/EventEmitter memory leak/.test(message)) {\r\n            assert.fail(null, null, 'Node issues a warning about a possible memory leak', null);\r\n          } else {\r\n            oldConsoleError.apply(console, arguments);\r\n          }\r\n        };\r\n\r\n        const handlers = [];\r\n        let handler;\r\n        let i;\r\n\r\n        for (i = 0; i < 11; i++) {\r\n          handler = () => {};\r\n          instance.onLocaleChange(handler);\r\n          handlers.push(handler);\r\n        }\r\n\r\n        for (i = 0; i < 11; i++) {\r\n          instance.offLocaleChange(handlers[i]);\r\n        }\r\n\r\n        console.error = oldConsoleError\r\n      });\r\n    })\r\n  });\r\n\r\n  describe('#offLocaleChange', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.offLocaleChange);\r\n    });\r\n\r\n    it('stops the emission of events to the handler', done => {\r\n      let count = 0;\r\n\r\n      const handler = () => { count++; };\r\n\r\n      instance.onLocaleChange(handler);\r\n      instance.setLocale(`${instance.getLocale()}x`);\r\n      instance.setLocale(`${instance.getLocale()}x`);\r\n      instance.offLocaleChange(handler);\r\n      instance.setLocale(`${instance.getLocale()}x`);\r\n\r\n      setTimeout(() => {\r\n        assert.equal(count, 2, 'handler was called although deactivated');\r\n        done();\r\n      }, 100);\r\n    });\r\n  });\r\n\r\n  describe('#onTranslationNotFound', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.onTranslationNotFound);\r\n    });\r\n\r\n    it('is called when the translation is missing and a fallback is provided as option', done => {\r\n      const handler = () => { done(); };\r\n      instance.onTranslationNotFound(handler);\r\n      instance.translate('foo', { fallback: 'bar' });\r\n      instance.offTranslationNotFound(handler);\r\n    });\r\n\r\n    it('is not called when the translation is missing and no fallback is provided as option', done => {\r\n      const handler = () => { done('function was called'); };\r\n      instance.onTranslationNotFound(handler);\r\n      instance.translate('foo', { fallback: undefined });\r\n      instance.offTranslationNotFound(handler);\r\n      setTimeout(done, 100);\r\n    });\r\n\r\n    it('is not called when a translation exists', done => {\r\n      const handler = () => { done('function was called'); };\r\n      instance.registerTranslations('xx', { foo: 'bar' });\r\n      instance.onTranslationNotFound(handler);\r\n      instance.translate('foo', { locale: 'xx', fallback: 'baz' });\r\n      instance.offTranslationNotFound(handler);\r\n      setTimeout(done, 100);\r\n    });\r\n\r\n    describe('when called', () => {\r\n      it('exposes the current locale, key, fallback and scope as arguments', done => {\r\n        const handler = (locale, key, fallback, scope) => {\r\n          assert.equal('yy', locale);\r\n          assert.equal('foo', key);\r\n          assert.equal('bar', fallback);\r\n          assert.equal('zz', scope);\r\n          done();\r\n        };\r\n\r\n        instance.onTranslationNotFound(handler);\r\n        instance.translate('foo', { locale: 'yy', fallback: 'bar', scope: 'zz' });\r\n        instance.offTranslationNotFound(handler);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('#offTranslationNotFound', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.offTranslationNotFound);\r\n    });\r\n\r\n    it('stops the emission of events to the handler', done => {\r\n      let count = 0;\r\n\r\n      const handler = () => { count++; };\r\n\r\n      instance.onTranslationNotFound(handler);\r\n      instance.translate('foo', { fallback: 'bar' });\r\n      instance.translate('foo', { fallback: 'bar' });\r\n      instance.offTranslationNotFound(handler);\r\n      instance.translate('foo', { fallback: 'bar' });\r\n\r\n      setTimeout(() => {\r\n        assert.equal(count, 2, 'handler was called although deactivated');\r\n        done();\r\n      }, 100);\r\n    });\r\n  });\r\n\r\n  describe('#getSeparator', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.getSeparator);\r\n    });\r\n\r\n    it('returns the separator stored in the registry', () => {\r\n      assert.equal(instance.getSeparator(), instance._registry.separator);\r\n    });\r\n\r\n    it('returns \".\" by default', () => {\r\n      assert.equal(instance.getSeparator(), '.');\r\n    });\r\n  });\r\n\r\n  describe('#setSeparator', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.setSeparator);\r\n    });\r\n\r\n    it('sets the separator stored in the registry', () => {\r\n      const prev = instance._registry.separator;\r\n\r\n      instance.setSeparator('*');\r\n      assert.equal(instance._registry.separator, '*');\r\n\r\n      instance._registry.separator = prev;\r\n    });\r\n\r\n    it('returns the previous separator that was stored in the registry', () => {\r\n      const current  = instance.getSeparator();\r\n      const previous = instance.setSeparator(`${current}x`);\r\n      assert.equal(previous, current);\r\n      instance.setSeparator(current);\r\n    });\r\n  });\r\n\r\n  describe('#getInterpolate', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.getInterpolate);\r\n    });\r\n\r\n    it('returns the setting stored in the registry', () => {\r\n      assert.equal(instance.getInterpolate(), instance._registry.interpolate);\r\n    });\r\n\r\n    it('returns true by default', () => {\r\n      assert.equal(instance.getInterpolate(), true);\r\n    });\r\n  });\r\n\r\n  describe('#setInterpolate', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.setInterpolate);\r\n    });\r\n\r\n    it('sets the interpolate stored in the registry', () => {\r\n      const prev = instance._registry.interpolate;\r\n\r\n      instance.setInterpolate(true);\r\n      assert.equal(instance._registry.interpolate, true);\r\n\r\n      instance._registry.interpolate = prev;\r\n    });\r\n\r\n    it('returns the previous interpolate that was stored in the registry', () => {\r\n      const current  = instance.getInterpolate();\r\n      const previous = instance.setInterpolate(true);\r\n      assert.equal(previous, current);\r\n      instance.setInterpolate(current);\r\n    });\r\n  });\r\n\r\n  describe('#getKeyTransformer', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.getKeyTransformer);\r\n    });\r\n\r\n    it('returns the setting stored in the registry', () => {\r\n      assert.equal(instance.getKeyTransformer(), instance._registry.keyTransformer);\r\n    });\r\n  });\r\n\r\n  describe('#setKeyTransformer', () => {\r\n    const transformer = (key, options) => {\r\n      assert.deepEqual({ locale: 'xx', bingo: 'bongo' }, options);\r\n      return key.toLowerCase();\r\n    };\r\n\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.setKeyTransformer);\r\n    });\r\n\r\n    it('sets the keyTransformer stored in the registry', () => {\r\n      const prev = instance._registry.keyTransformer;\r\n\r\n      instance.setKeyTransformer(transformer);\r\n      assert.equal(instance._registry.keyTransformer, transformer);\r\n\r\n      instance._registry.keyTransformer = prev;\r\n    });\r\n\r\n    it('returns the previous keyTransformer that was stored in the registry', () => {\r\n      const current  = instance.getKeyTransformer();\r\n      const previous = instance.setKeyTransformer(transformer);\r\n      assert.equal(previous, current);\r\n      instance.setKeyTransformer(current);\r\n    });\r\n\r\n    it('uses the custom key transformer when translating', () => {\r\n      instance.registerTranslations('xx', { foo: 'bar' });\r\n\r\n      let translation = instance.translate('FOO', { locale: 'xx', bingo: 'bongo' });\r\n      assert.matches(translation, /missing translation/);\r\n\r\n      instance.setKeyTransformer(transformer);\r\n      translation = instance.translate('FOO', { locale: 'xx', bingo: 'bongo' });\r\n      assert.equal('bar', translation);\r\n    });\r\n  });\r\n\r\n  describe('#withSeparator', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.withSeparator);\r\n    });\r\n\r\n    it('temporarily changes the current separator within the callback', () => {\r\n      const separator = instance.getSeparator();\r\n\r\n      instance.withSeparator(`${separator}x`, () => {\r\n        assert.equal(instance.getSeparator(), `${separator}x`);\r\n      });\r\n\r\n      assert.equal(instance.getSeparator(), separator);\r\n    });\r\n\r\n    it('allows a custom callback context to be set', () => {\r\n      instance.withSeparator('foo', function() {\r\n        assert.equal(this.bar, 'baz');\r\n      }, { bar: 'baz' })\r\n    });\r\n\r\n    it('returns the return value of the callback', () => {\r\n      const result = instance.withSeparator('foo', () => 'bar');\r\n      assert.equal(result, 'bar');\r\n    });\r\n  });\r\n\r\n  describe('#localize', () => {\r\n    before(() => {\r\n      instance.setLocale('en');\r\n    });\r\n\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.localize);\r\n    });\r\n\r\n    it('does not mutate these options', () => {\r\n      const options = { locale: 'en', scope: ['foo1', 'foo2'], count: 3, bar: { baz: 'bum' } };\r\n      instance.localize(new Date(), options);\r\n      assert.deepEqual(options, { locale: 'en', scope: ['foo1', 'foo2'], count: 3, bar: { baz: 'bum' } });\r\n    });\r\n\r\n    describe('when called without a date as first argument', () => {\r\n      it('throws an invalid argument error', () => {\r\n        assert.throws(() => {\r\n          instance.localize('foo');\r\n        }, /invalid argument/);\r\n      });\r\n    });\r\n\r\n    describe('when called with a date as first argument', () => {\r\n      const date = new time.Date('Thu Feb 6 2014 05:09:04 GMT+0100 (CET)');\r\n      date.setTimezone('America/Chicago');\r\n\r\n      describe('without providing options as second argument', () => {\r\n        it('returns the default localization for that date', () => {\r\n          const result = instance.localize(date);\r\n          assert.equal(result, 'Wed, 5 Feb 2014 22:09');\r\n        });\r\n      });\r\n\r\n      describe('providing a `format` key in the options', () => {\r\n        describe('with format = \"default\"', () => {\r\n          it('returns the default localization for that date', () => {\r\n            const result = instance.localize(date, { format: 'default' });\r\n            assert.equal(result, 'Wed, 5 Feb 2014 22:09');\r\n          });\r\n        });\r\n\r\n        describe('with format = \"short\"', () => {\r\n          it('returns the short localization for that date', () => {\r\n            const result = instance.localize(date, { format: 'short' });\r\n            assert.equal(result, '5 Feb 22:09');\r\n          });\r\n        });\r\n\r\n        describe('with format = \"long\"', () => {\r\n          it('returns the long localization for that date', () => {\r\n            const result = instance.localize(date, { format: 'long' });\r\n            assert.equal(result, 'Wednesday, February 5th, 2014 22:09:04 -06:00');\r\n          });\r\n        });\r\n\r\n        describe('with an unknown format', () => {\r\n          it('returns a string containing \"missing translation\"', () => {\r\n            const result = instance.localize(date, { format: '__invalid__' });\r\n            assert.matches(result, /missing translation/);\r\n          });\r\n        });\r\n      });\r\n\r\n      describe('providing a `type` key in the options', () => {\r\n        describe('with type = \"datetime\"', () => {\r\n          it('returns the default localization for that date', () => {\r\n            const result = instance.localize(date, { type: 'datetime' });\r\n            assert.equal(result, 'Wed, 5 Feb 2014 22:09');\r\n          });\r\n        });\r\n\r\n        describe('with type = \"date\"', () => {\r\n          it('returns the date localization for that date', () => {\r\n            const result = instance.localize(date, { type: 'date' });\r\n            assert.equal(result, 'Wed, 5 Feb 2014');\r\n          });\r\n        });\r\n\r\n        describe('with type = \"time\"', () => {\r\n          it('returns the time localization for that date', () => {\r\n            const result = instance.localize(date, { type: 'time' });\r\n            assert.equal(result, '22:09');\r\n          });\r\n        });\r\n\r\n        describe('with an unknown type', () => {\r\n          it('returns a string containing \"missing translation\"', () => {\r\n            const result = instance.localize(date, { type: '__invalid__' });\r\n            assert.matches(result, /missing translation/);\r\n          });\r\n        });\r\n      });\r\n\r\n      describe('providing both a `type` key and a `format` key in the options', () => {\r\n        describe('with type = \"datetime\" and format = \"default\"', () => {\r\n          it('returns the default localization for that date', () => {\r\n            const result = instance.localize(date, { type: 'datetime', format: 'default' });\r\n            assert.equal(result, 'Wed, 5 Feb 2014 22:09');\r\n          });\r\n        });\r\n\r\n        describe('with type = \"datetime\" and format = \"short\"', () => {\r\n          it('returns the short datetime localization for that date', () => {\r\n            const result = instance.localize(date, { type: 'datetime', format: 'short' });\r\n            assert.equal(result, '5 Feb 22:09');\r\n          });\r\n        });\r\n\r\n        describe('with type = \"datetime\" and format = \"long\"', () => {\r\n          it('returns the long datetime localization for that date', () => {\r\n            const result = instance.localize(date, { type: 'datetime', format: 'long' });\r\n            assert.equal(result, 'Wednesday, February 5th, 2014 22:09:04 -06:00');\r\n          });\r\n        });\r\n\r\n        describe('with type = \"time\" and format = \"default\"', () => {\r\n          it('returns the default time localization for that date', () => {\r\n            const result = instance.localize(date, { type: 'time', format: 'default' });\r\n            assert.equal(result, '22:09');\r\n          });\r\n        });\r\n\r\n        describe('with type = \"time\" and format = \"short\"', () => {\r\n          it('returns the short time localization for that date', () => {\r\n            const result = instance.localize(date, { type: 'time', format: 'short' });\r\n            assert.equal(result, '22:09');\r\n          });\r\n        });\r\n\r\n        describe('with type = \"time\" and format = \"long\"', () => {\r\n          it('returns the long time localization for that date', () => {\r\n            const result = instance.localize(date, { type: 'time', format: 'long' });\r\n            assert.equal(result, '22:09:04 -06:00');\r\n          });\r\n        });\r\n\r\n        describe('with type = \"date\" and format = \"default\"', () => {\r\n          it('returns the default date localization for that date', () => {\r\n            const result = instance.localize(date, { type: 'date', format: 'default' });\r\n            assert.equal(result, 'Wed, 5 Feb 2014');\r\n          });\r\n        });\r\n\r\n        describe('with type = \"date\" and format = \"short\"', () => {\r\n          it('returns the short date localization for that date', () => {\r\n            const result = instance.localize(date, { type: 'date', format: 'short' });\r\n            assert.equal(result, 'Feb 5');\r\n          });\r\n        });\r\n\r\n        describe('with type = \"date\" and format = \"long\"', () => {\r\n          it('returns the long date localization for that date', () => {\r\n            const result = instance.localize(date, { type: 'date', format: 'long' });\r\n            assert.equal(result, 'Wednesday, February 5th, 2014');\r\n          });\r\n        });\r\n\r\n        describe('with unknown type and unknown format', () => {\r\n          it('returns a string containing \"missing translation\"', () => {\r\n            const result = instance.localize(date, { type: '__invalid__', format: '__invalid__' });\r\n            assert.matches(result, /missing translation/);\r\n          });\r\n        });\r\n      });\r\n\r\n      describe('with locale set to \"de\"', () => {\r\n        let prev;\r\n\r\n        beforeEach(() => {\r\n          instance.registerTranslations('de', require('./locales/de'));\r\n          prev = instance.setLocale('de');\r\n        });\r\n\r\n        afterEach(() => {\r\n          instance.setLocale(prev);\r\n        });\r\n\r\n        describe('without providing options as second argument', () => {\r\n          it('returns the default localization for that date', () => {\r\n            const result = instance.localize(date);\r\n            assert.equal(result, 'Mi, 5. Feb 2014, 22:09 Uhr');\r\n          });\r\n        });\r\n\r\n        describe('providing a `format` key in the options', () => {\r\n          describe('with format = \"default\"', () => {\r\n            it('returns the default localization for that date', () => {\r\n              const result = instance.localize(date, { format: 'default' });\r\n              assert.equal(result, 'Mi, 5. Feb 2014, 22:09 Uhr');\r\n            });\r\n          });\r\n\r\n          describe('with format = \"short\"', () => {\r\n            it('returns the short localization for that date', () => {\r\n              const result = instance.localize(date, { format: 'short' });\r\n              assert.equal(result, '05.02.14 22:09');\r\n            });\r\n          });\r\n\r\n          describe('with format = \"long\"', () => {\r\n            it('returns the long localization for that date', () => {\r\n              const result = instance.localize(date, { format: 'long' });\r\n              assert.equal(result, 'Mittwoch, 5. Februar 2014, 22:09:04 -06:00');\r\n            });\r\n          });\r\n\r\n          describe('with an unknown format', () => {\r\n            it('returns a string containing \"missing translation\"', () => {\r\n              const result = instance.localize(date, { format: '__invalid__' });\r\n              assert.matches(result, /missing translation/);\r\n            });\r\n          });\r\n        });\r\n\r\n        describe('providing a `type` key in the options', () => {\r\n          describe('with type = \"datetime\"', () => {\r\n            it('returns the default localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'datetime' });\r\n              assert.equal(result, 'Mi, 5. Feb 2014, 22:09 Uhr');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"date\"', () => {\r\n            it('returns the date localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'date' });\r\n              assert.equal(result, 'Mi, 5. Feb 2014');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"time\"', () => {\r\n            it('returns the time localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'time' });\r\n              assert.equal(result, '22:09 Uhr');\r\n            });\r\n          });\r\n\r\n          describe('with an unknown type', () => {\r\n            it('returns a string containing \"missing translation\"', () => {\r\n              const result = instance.localize(date, { type: '__invalid__' });\r\n              assert.matches(result, /missing translation/);\r\n            });\r\n          });\r\n        });\r\n\r\n        describe('providing both a `type` key and a `format` key in the options', () => {\r\n          describe('with type = \"datetime\" and format = \"default\"', () => {\r\n            it('returns the default localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'datetime', format: 'default' });\r\n              assert.equal(result, 'Mi, 5. Feb 2014, 22:09 Uhr');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"datetime\" and format = \"short\"', () => {\r\n            it('returns the short datetime localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'datetime', format: 'short' });\r\n              assert.equal(result, '05.02.14 22:09');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"datetime\" and format = \"long\"', () => {\r\n            it('returns the long datetime localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'datetime', format: 'long' });\r\n              assert.equal(result, 'Mittwoch, 5. Februar 2014, 22:09:04 -06:00');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"time\" and format = \"default\"', () => {\r\n            it('returns the default time localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'time', format: 'default' });\r\n              assert.equal(result, '22:09 Uhr');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"time\" and format = \"short\"', () => {\r\n            it('returns the short time localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'time', format: 'short' });\r\n              assert.equal(result, '22:09');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"time\" and format = \"long\"', () => {\r\n            it('returns the long time localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'time', format: 'long' });\r\n              assert.equal(result, '22:09:04 -06:00');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"date\" and format = \"default\"', () => {\r\n            it('returns the default date localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'date', format: 'default' });\r\n              assert.equal(result, 'Mi, 5. Feb 2014');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"date\" and format = \"short\"', () => {\r\n            it('returns the short date localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'date', format: 'short' });\r\n              assert.equal(result, '05.02.14');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"date\" and format = \"long\"', () => {\r\n            it('returns the long date localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'date', format: 'long' });\r\n              assert.equal(result, 'Mittwoch, 5. Februar 2014');\r\n            });\r\n          });\r\n\r\n          describe('with unknown type and unknown format', () => {\r\n            it('returns a string containing \"missing translation\"', () => {\r\n              const result = instance.localize(date, { type: '__invalid__', format: '__invalid__' });\r\n              assert.matches(result, /missing translation/);\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      describe('with locale set to \"pt-br\"', () => {\r\n        let prev;\r\n\r\n        beforeEach(() => {\r\n          instance.registerTranslations('pt-br', require('./locales/pt-br'));\r\n          prev = instance.setLocale('pt-br');\r\n        });\r\n\r\n        afterEach(() => {\r\n          instance.setLocale(prev);\r\n        });\r\n\r\n        describe('without providing options as second argument', () => {\r\n          it('returns the default localization for that date', () => {\r\n            const result = instance.localize(date);\r\n            assert.equal(result, 'Qua, 5 de Fev de 2014 às 22:09');\r\n          });\r\n        });\r\n\r\n        describe('providing a `format` key in the options', () => {\r\n          describe('with format = \"default\"', () => {\r\n            it('returns the default localization for that date', () => {\r\n              const result = instance.localize(date, { format: 'default' });\r\n              assert.equal(result, 'Qua, 5 de Fev de 2014 às 22:09');\r\n            });\r\n          });\r\n\r\n          describe('with format = \"short\"', () => {\r\n            it('returns the short localization for that date', () => {\r\n              const result = instance.localize(date, { format: 'short' });\r\n              assert.equal(result, '05/02/14 às 22:09');\r\n            });\r\n          });\r\n\r\n          describe('with format = \"long\"', () => {\r\n            it('returns the long localization for that date', () => {\r\n              const result = instance.localize(date, { format: 'long' });\r\n              assert.equal(result, 'Quarta-feira, 5 de Fevereiro de 2014 às 22:09:04 -06:00');\r\n            });\r\n          });\r\n\r\n          describe('with an unknown format', () => {\r\n            it('returns a string containing \"missing translation\"', () => {\r\n              const result = instance.localize(date, { format: '__invalid__' });\r\n              assert.matches(result, /missing translation/);\r\n            });\r\n          });\r\n        });\r\n\r\n        describe('providing a `type` key in the options', () => {\r\n          describe('with type = \"datetime\"', () => {\r\n            it('returns the default localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'datetime' });\r\n              assert.equal(result, 'Qua, 5 de Fev de 2014 às 22:09');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"date\"', () => {\r\n            it('returns the date localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'date' });\r\n              assert.equal(result, 'Qua, 5 de Fev de 2014');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"time\"', () => {\r\n            it('returns the time localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'time' });\r\n              assert.equal(result, '22:09');\r\n            });\r\n          });\r\n\r\n          describe('with an unknown type', () => {\r\n            it('returns a string containing \"missing translation\"', () => {\r\n              const result = instance.localize(date, { type: '__invalid__' });\r\n              assert.matches(result, /missing translation/);\r\n            });\r\n          });\r\n        });\r\n\r\n        describe('providing both a `type` key and a `format` key in the options', () => {\r\n          describe('with type = \"datetime\" and format = \"default\"', () => {\r\n            it('returns the default localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'datetime', format: 'default' });\r\n              assert.equal(result, 'Qua, 5 de Fev de 2014 às 22:09');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"datetime\" and format = \"short\"', () => {\r\n            it('returns the short datetime localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'datetime', format: 'short' });\r\n              assert.equal(result, '05/02/14 às 22:09');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"datetime\" and format = \"long\"', () => {\r\n            it('returns the long datetime localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'datetime', format: 'long' });\r\n              assert.equal(result, 'Quarta-feira, 5 de Fevereiro de 2014 às 22:09:04 -06:00');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"time\" and format = \"default\"', () => {\r\n            it('returns the default time localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'time', format: 'default' });\r\n              assert.equal(result, '22:09');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"time\" and format = \"short\"', () => {\r\n            it('returns the short time localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'time', format: 'short' });\r\n              assert.equal(result, '22:09');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"time\" and format = \"long\"', () => {\r\n            it('returns the long time localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'time', format: 'long' });\r\n              assert.equal(result, '22:09:04 -06:00');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"date\" and format = \"default\"', () => {\r\n            it('returns the default date localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'date', format: 'default' });\r\n              assert.equal(result, 'Qua, 5 de Fev de 2014');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"date\" and format = \"short\"', () => {\r\n            it('returns the short date localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'date', format: 'short' });\r\n              assert.equal(result, '05/02/14');\r\n            });\r\n          });\r\n\r\n          describe('with type = \"date\" and format = \"long\"', () => {\r\n            it('returns the long date localization for that date', () => {\r\n              const result = instance.localize(date, { type: 'date', format: 'long' });\r\n              assert.equal(result, 'Quarta-feira, 5 de Fevereiro de 2014');\r\n            });\r\n          });\r\n\r\n          describe('with unknown type and unknown format', () => {\r\n            it('returns a string containing \"missing translation\"', () => {\r\n              const result = instance.localize(date, { type: '__invalid__', format: '__invalid__' });\r\n              assert.matches(result, /missing translation/);\r\n            });\r\n          });\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('#registerTranslations', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.registerTranslations);\r\n    });\r\n\r\n    it('returns the passed arguments as an object structure', () => {\r\n      const locale = 'foo';\r\n      const data   = { bar: { baz: 'bingo' } };\r\n\r\n      const actual = instance.registerTranslations(locale, data);\r\n\r\n      const expected = { foo: { bar: { baz: 'bingo' }}};\r\n\r\n      assert.deepEqual(actual, expected);\r\n    });\r\n\r\n    it('merges the passed arguments correctly into the registry', () => {\r\n      instance._registry.translations = {};\r\n\r\n      instance.registerTranslations('foo', { bar: { baz: 'bingo' } });\r\n      var expected = { foo: { bar: { baz: 'bingo' } } };\r\n      assert.deepEqual(instance._registry.translations, expected);\r\n\r\n      instance.registerTranslations('foo', { bar: { bam: 'boo' } });\r\n      var expected = { foo: { bar: { baz: 'bingo', bam: 'boo' } } };\r\n      assert.deepEqual(instance._registry.translations, expected);\r\n\r\n      instance.registerTranslations('foo', { bing: { bong: 'beng' } });\r\n      var expected = { foo: { bar: { baz: 'bingo', bam: 'boo' }, bing: { bong: 'beng' } } };\r\n      assert.deepEqual(instance._registry.translations, expected);\r\n\r\n      // clean up\r\n      instance._registry.translations = {};\r\n      instance.registerTranslations('en', require('./locales/en'));\r\n    });\r\n  });\r\n\r\n  describe('#registerInterpolations', () => {\r\n    it('is a function', () => {\r\n      assert.isFunction(instance.registerInterpolations);\r\n    });\r\n\r\n    it('merges the passed arguments correctly into the registry', () => {\r\n      instance._registry.interpolations = {};\r\n\r\n      instance.registerInterpolations({ foo: 'yes', bar: 'no' });\r\n      assert.deepEqual(instance._registry.interpolations, { foo: 'yes', bar: 'no' });\r\n\r\n      instance.registerInterpolations({ baz: 'hey' });\r\n      assert.deepEqual(instance._registry.interpolations, { foo: 'yes', bar: 'no', baz: 'hey' });\r\n\r\n      // clean up\r\n      instance._registry.interpolations = {};\r\n    });\r\n  });\r\n\r\n  describe('explicitly checking the examples of the README', () => {\r\n    it('passes all tests', () => {\r\n      translate.registerTranslations('en', {\r\n        damals: {\r\n          about_x_hours_ago: {\r\n            one:   'about one hour ago',\r\n            other: 'about %(count)s hours ago'\r\n          }\r\n        }\r\n      });\r\n\r\n      assert.deepEqual(translate('damals'), { about_x_hours_ago: { one: 'about one hour ago', other: 'about %(count)s hours ago' } });\r\n\r\n      assert.equal(translate('damals.about_x_hours_ago.one'),                    'about one hour ago');\r\n      assert.equal(translate(['damals', 'about_x_hours_ago', 'one']),            'about one hour ago');\r\n      assert.equal(translate(['damals', 'about_x_hours_ago.one']),               'about one hour ago');\r\n      assert.equal(translate('about_x_hours_ago.one', { scope: 'damals' }),      'about one hour ago');\r\n      assert.equal(translate('one', { scope: 'damals.about_x_hours_ago' }),      'about one hour ago');\r\n      assert.equal(translate('one', { scope: ['damals', 'about_x_hours_ago'] }), 'about one hour ago');\r\n\r\n      assert.equal(translate('damals.about_x_hours_ago.one', { separator: '*' }), 'missing translation: en*damals.about_x_hours_ago.one');\r\n\r\n      translate.registerTranslations('en', { foo: 'foo %(bar)s' });\r\n\r\n      assert.equal(translate('foo', { bar: 'baz' }), 'foo baz');\r\n\r\n      translate.registerTranslations('en', {\r\n        x_items: {\r\n          zero:  'No items.',\r\n          one:   'One item.',\r\n          other: '%(count)s items.'\r\n        }\r\n      });\r\n\r\n      assert.equal(translate('x_items', { count: 0  }), 'No items.');\r\n      assert.equal(translate('x_items', { count: 1  }), 'One item.');\r\n      assert.equal(translate('x_items', { count: 42 }), '42 items.');\r\n\r\n      assert.equal(translate('baz', { fallback: 'default' }), 'default');\r\n\r\n      translate.registerTranslations('de', require('./locales/de'));\r\n      translate.registerTranslations('de', JSON.parse('{\"my_project\": {\"greeting\": \"Hallo, %(name)s!\",\"x_items\": {\"one\": \"1 Stück\", \"other\": \"%(count)s Stücke\"}}}'));\r\n\r\n      assert.equal(translate.withLocale('de', () => translate('greeting', { scope: 'my_project', name: 'Martin' })), 'Hallo, Martin!');\r\n      assert.equal(translate.withLocale('de', () => translate('x_items', { scope: 'my_project', count: 1 })), '1 Stück');\r\n\r\n      const date = new time.Date('Fri Feb 21 2014 13:46:24 GMT+0100 (CET)');\r\n      date.setTimezone('Europe/Amsterdam');\r\n\r\n      assert.equal(translate.localize(date)                       , 'Fri, 21 Feb 2014 13:46');\r\n      assert.equal(translate.localize(date, { format: 'short' })  , '21 Feb 13:46');\r\n      assert.equal(translate.localize(date, { format: 'long' })   , 'Friday, February 21st, 2014 13:46:24 +01:00');\r\n\r\n      assert.equal(translate.localize(date, { type: 'date' })                  , 'Fri, 21 Feb 2014');\r\n      assert.equal(translate.localize(date, { type: 'date', format: 'short' }) , 'Feb 21');\r\n      assert.equal(translate.localize(date, { type: 'date', format: 'long' })  , 'Friday, February 21st, 2014');\r\n\r\n      assert.equal(translate.localize(date, { type: 'time' })                  , '13:46');\r\n      assert.equal(translate.localize(date, { type: 'time', format: 'short' }) , '13:46');\r\n      assert.equal(translate.localize(date, { type: 'time', format: 'long' })  , '13:46:24 +01:00');\r\n\r\n      assert.equal(translate.localize(date, { locale: 'de' })  , 'Fr, 21. Feb 2014, 13:46 Uhr');\r\n\r\n      translate.registerTranslations('en', {\r\n        my_namespace: {\r\n          greeting: 'Welcome to %(app_name)s, %(visitor)s!'\r\n        }\r\n      });\r\n\r\n      translate.registerInterpolations({ app_name: 'My Cool App' });\r\n\r\n      assert.equal(translate('my_namespace.greeting', { visitor: 'Martin' }), 'Welcome to My Cool App, Martin!');\r\n      assert.equal(translate('my_namespace.greeting', { visitor: 'Martin', app_name: 'The Foo App' }), 'Welcome to The Foo App, Martin!');\r\n    });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n/* Helper Functions */\r\n\r\nassert.isString = (value, message) => {\r\n  assert.equal(Object.prototype.toString.call(value), '[object String]', message || (`${value} is not a string`));\r\n};\r\n\r\nassert.isFunction = (value, message) => {\r\n  assert.equal(Object.prototype.toString.call(value), '[object Function]', message || (`${value} is not a function`));\r\n};\r\n\r\nassert.isObject = (value, message) => {\r\n  assert.equal(Object.prototype.toString.call(value), '[object Object]', message || (`${value} is not an object`));\r\n};\r\n\r\nassert.isUndefined = (value, message) => {\r\n  assert.equal(Object.prototype.toString.call(value), '[object Undefined]', message || (`${value} is not undefined`));\r\n};\r\n\r\nassert.matches = (actual, expected, message) => {\r\n  if (!expected.test(actual)) {\r\n    assert.fail(actual, expected, message, '!~');\r\n  }\r\n};\r\n"]}